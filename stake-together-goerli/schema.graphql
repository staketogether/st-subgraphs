type StakeTogether @entity {
  id: ID!

  accounts: [Account!]! @derivedFrom(field: "st")
  pools: [Pool!]! @derivedFrom(field: "st")
  delegations: [Delegation!]! @derivedFrom(field: "st")

  contractBalance: BigInt!
  beaconBalance: BigInt!
  transientBalance: BigInt!
  liquidityBufferBalance: BigInt!
  poolBalance: BigInt!
  withdrawalsBalance: BigInt!

  minDepositAmount: BigInt!

  totalPooledEther: BigInt!
  totalSupply: BigInt!
  totalShares: BigInt!
  totalDelegatedShares: BigInt!
  totalRewardsShares: BigInt!

  operatorFeeAddress: String!
  stakeTogetherFeeAddress: String!

  totalPoolRewardsShares: BigInt!
  totalOperatorRewardsShares: BigInt!
  totalStakeTogetherRewardsShares: BigInt!

  totalValidators: BigInt!
  validators: [Validator!]!
}

type Account @entity {
  id: ID!
  st: StakeTogether!

  address: String!

  shares: BigInt!
  rewardsShares: BigInt!

  depositBalance: BigInt!
  withdrawBalance: BigInt!
  originalBalance: BigInt!
  currentBalance: BigInt!
  rewardsBalance: BigInt!

  sentDelegationsCount: BigInt!
  delegations: [Delegation!]! @derivedFrom(field: "delegate")
}

type Pool @entity {
  id: ID!
  st: StakeTogether!

  address: String!
  active: Boolean!

  delegatedShares: BigInt!
  rewardsShares: BigInt!

  # delegatedBalance: BigInt!
  # rewardsBalance: BigInt!

  receivedDelegationsCount: BigInt!
  delegations: [Delegation!]! @derivedFrom(field: "delegated")
}

type Delegation @entity {
  id: ID!
  st: StakeTogether!

  delegate: Account!
  delegated: Pool!

  delegationShares: BigInt!

  # delegationBalance: BigInt!
}

type Validator @entity(immutable: true) {
  id: Bytes!
  creator: Bytes!
  amount: BigInt!
  publicKey: Bytes!
  withdrawalCredentials: Bytes!
  signature: Bytes!
  depositDataRoot: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
