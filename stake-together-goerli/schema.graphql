type StakeTogether @entity {
  id: ID!

  accounts: [Account!]! @derivedFrom(field: "st")
  communities: [Community!]! @derivedFrom(field: "st")
  delegations: [Delegation!]! @derivedFrom(field: "st")

  contractBalance: BigInt!
  beaconBalance: BigInt!
  transientBalance: BigInt!
  liquidityBalance: BigInt!
  extendedBalance: BigInt!

  bufferedBalance: BigInt!
  extendedBufferedBalance: BigInt!
  withdrawalsBalance: BigInt!

  totalPooledEther: BigInt!
  totalSupply: BigInt!

  totalShares: BigInt!
  totalDelegatedShares: BigInt!
  totalRewardsShares: BigInt!

  stakeTogetherFeeRecipient: Bytes
  operatorFeeRecipient: Bytes
}

type Account @entity {
  id: ID!
  st: StakeTogether!

  address: Bytes!

  shares: BigInt!
  rewardsShares: BigInt!

  delegationsCount: BigInt!
  delegations: [Delegation!]! @derivedFrom(field: "delegate")
}

type Community @entity {
  id: ID!
  st: StakeTogether!

  address: Bytes!
  active: Boolean!

  delegatedShares: BigInt!
  rewardsShares: BigInt!

  delegationsCount: BigInt!
  delegations: [Delegation!]! @derivedFrom(field: "delegated")
}

type Delegation @entity {
  id: ID!
  st: StakeTogether!

  delegate: Account!
  delegated: Community!

  delegationShares: BigInt!
}
